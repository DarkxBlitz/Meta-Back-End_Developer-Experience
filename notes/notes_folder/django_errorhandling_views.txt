Exception classes
Django’s exception classes are defined in the django.core.exceptions module. 

Some important exception types are:

-ObjectDoesNotExist: All the exceptions of the DoesNotExist are inherited from this base exception.

-EmptyResultSet: This exception is raised if a query does not return any result.

-FieldDoesNotExist: This exception is raised when the requested field does not exist.

try: 
    field = model._meta.get_field(field_name) 
except FieldDoesNotExist: 
    return HttpResponse("Field Does not exist") 


-MultipleObjectsReturned: When you expect a certain query to return only a single object, however multiple objects are returned. This is when you need to raise this exception.

-PermissionDenied: This exception is raised when a user does not have permission to perform the action requested.

def myview(request): 
    if not request.user.has_perm('myapp.view_mymodel'): 
        raise PermissionDenied() 
    return HttpResponse() 

ViewDoesNotExist: This exception is raised by django.urls when a requested view does not exist, possibly because of incorrect mapping defined in the URLconf. 

When a certain view is called with a POST or PUT request, the request body is populated by the form data. 

Django’s Form API defines various fields specific to the type of data stored. For example, you have EmailField, FileField, IntegerField, MultipleChoiceField. 

These fields have built-in validators. The is_valid() method returns True if the validations are passed. You can raise an exception if it returns False.

def myview(request):   
    if request.method == "POST":   
        form = MyForm(request.POST)   
        if form.is_valid():   
            #process the form data 
        else:   
                return HttpResponse("Form submitted with invalid data") 

