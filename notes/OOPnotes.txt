OOP Description:
Easy to understand, Reusable, Abstraction and can move between projects.

Class:
Defined with the 'class' keyword
Has Attributes: Can be variables
Has Behavior: Can be functions

Objects:
Instances of a class, sort of like a blueprint
To instantiate an instance object, it is necessary to define a class, declare an instance, and initialize that instance.

Method1 (creating and returning a new empty object):
def __new__(cls: type[Self]) -> Self:
    pass

Method2:
def __init__(self) -> None:
    pass

1)Inheritance:
Creating a new class which is derivative of an existing one.
Deals with Parent Class and Child class

2)Polymorphism:
The ability of a function to change its behavior when called by different objects

3)Encapsulation:
Limits access to method and variables by encasing them in a single unit of scope.
Helps prevent unwanted modification

4)Abstraction:
Hides implementation details for data security

________________________________________________________________________________________________________________________________________________________________________________________________
EXAMPLE OF ENCAPSULATION:

class Alpha:

def __init__(self):
    self._a = 2.  # Protected member ‘a’
    self.__b = 2.  # Private member ‘b’

self._a is a protected member and can be accessed by the class and its subclasses.

Private members in Python are conventionally used with preceding double underscores: __. self.__b is a private member of the class Alpha and can only be accessed from within the class Alpha.
________________________________________________________________________________________________________________________________________________________________________________________________
EXAMPLE OF POLYMORPHISM:
string = "poly"
num = 7
sequence = [1,2,3]
new_str = string * 3
new_num = 7 * 3
new_sequence = sequence * 3

print(new_str, new_num, new_sequence)
output is: polypolypoly 21 [1, 2, 3, 1, 2, 3, 1, 2, 3]
In the example, I have used the same operator () to perform on a string, integer and a list. You can see the () operator behaves differently in all three cases.
________________________________________________________________________________________________________________________________________________________________________________________________
EXAMPLE OF INHERITANCE:
class Parent:
    Members of the parent class

class Child(Parent):
    Inherited members from parent class
    Additional members of the child class

As the structure of inheritance gets more complicated, Python adheres to something called the Method Resolution Order (MRO) that determines the flow of execution. MRO is a set of rules, or an algorithm, that Python uses to implement monotonicity, which refers to the order or sequence in which the interpreter will look for the variables and functions to implement. This also helps in determining the scope of the different members of the given class.
________________________________________________________________________________________________________________________________________________________________________________________________
EXAMPLE OF ABSTRACTION:
from abc import ABC,   
class ClassName(ABC):
    pass

Abstraction can be seen both as a means for hiding important information as well as unnecessary information in a block of code. The core of abstraction in Python is the implementation of something called abstract classes and methods, which can be implemented by inheriting from something called the abc module. "abc" here stands for abstract base class. It is first imported and then used as a parent class for some class that becomes an abstract class. 
________________________________________________________________________________________________________________________________________________________________________________________________